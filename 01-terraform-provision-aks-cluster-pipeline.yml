# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - name: DEV_ENVIRONMENT
    value: dev
  - name: CTC_ENVIRONMENT
    value: ctc

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@1
          displayName: Install Terraform
          inputs:
            terraformVersion: 'latest'
        
        - task: TerraformTaskV4@4
          displayName: Terraform Initialization
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendServiceArm: 'terraform-aks-azurerm-svc-con'
            backendAzureRmResourceGroupName: 'terraform-rg'
            backendAzureRmStorageAccountName: 'terraformstorage0101'
            backendAzureRmContainerName: 'tfstatefiles'
            backendAzureRmKey: 'aks-base.tfstate'
        
        - task: TerraformTaskV4@4
          displayName: Terraform validation
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'


  - stage: DeployAKSClusters
    jobs:
      - deployment: DeployDevAKSCluster
        displayName: Deploy Dev AKS Cluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
         runOnce:
           deploy:
             steps:
               - task: DownloadSecureFile@1
                 displayName: Download SSH key
                 name: sshkey
                 inputs:
                   secureFile: 'aks-terraform-devops-ssh-key-ubunbtu.pub'
               - task: TerraformTaskV4@4
                 displayName: Terraform intialization
                 inputs:
                   provider: 'azurerm'
                   command: 'init'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   backendServiceArm: 'terraform-aks-azurerm-svc-con'
                   backendAzureRmResourceGroupName: 'terraform-rg'
                   backendAzureRmStorageAccountName: 'terraformstorage0101'
                   backendAzureRmContainerName: 'tfstatefiles'
                   backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'

               - task: TerraformTaskV4@4
                 displayName: Terraform Plan
                 inputs:
                   provider: 'azurerm'
                   command: 'plan'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                   environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
                   
               - task: TerraformTaskV4@4
                 displayName: Terraform Apply
                 inputs:
                   provider: 'azurerm'
                   command: 'apply'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                   environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'

      - deployment: DeployCTCAKSCluster
        dependsOn: DeployDevAKSCluster
        displayName: Deploy CTC AKS Cluster
        pool:
          vmImage: 'ubuntu-latest'
        environment: $(CTC_ENVIRONMENT)
        strategy:
         runOnce:
           deploy:
             steps:
               - task: DownloadSecureFile@1
                 displayName: Download SSH key
                 name: sshkey
                 inputs:
                   secureFile: 'aks-terraform-devops-ssh-key-ubunbtu.pub'
               - task: TerraformTaskV4@4
                 displayName: Terraform intialization
                 inputs:
                   provider: 'azurerm'
                   command: 'init'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   backendServiceArm: 'terraform-aks-azurerm-svc-con'
                   backendAzureRmResourceGroupName: 'terraform-rg'
                   backendAzureRmStorageAccountName: 'terraformstorage0101'
                   backendAzureRmContainerName: 'tfstatefiles'
                   backendAzureRmKey: 'aks-$(CTC_ENVIRONMENT).tfstate'

               - task: TerraformTaskV4@4
                 displayName: Terraform Plan
                 inputs:
                   provider: 'azurerm'
                   command: 'plan'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(CTC_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(CTC_ENVIRONMENT)-$(Build.BuildId).out'
                   environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
                   
               - task: TerraformTaskV4@4
                 displayName: Terraform Apply
                 inputs:
                   provider: 'azurerm'
                   command: 'apply'
                   workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                   commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(CTC_ENVIRONMENT)-$(Build.BuildId).out'
                   environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
